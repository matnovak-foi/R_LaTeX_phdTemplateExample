@article{shah2016,
abstract = {In this paper we propose different representations of a source code, which attempt to highlight different aspects of a code; particularly: (i) lexical, (ii) structural, and (iii) stylistics. For the lexical view, we used levenshtein distance without considering all reserved words of the programming language. For the structural view, we proposed a similarity metric that takes into account the function's signatures and variable declaration within a source code. The third view consists of several stylistic features, such as the number of white spaces, lines of code, upper case letters, etc. At the end, we combine these different representations in several ways. Obtained results indicate that proposed representations provide some information that allows to detect particular cases of source code re-use. {\textcopyright} Springer Science+Business Media Singapore 2016.},

author = {Shah, Nrupesh and Modha, Sandip and Dave, Dhruv},
doi = {10.1007/978-981-10-0135-2_62},

file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2016 - Shah, Modha, Dave - Differential Weight Based Hybrid Approach to Detect Software Plagiarism.pdf:pdf},
isbn = {978-9-8110-0133-8},
issn = {2194-5357},
journal = {Advances in Intelligent Systems and Computing},
pages = {645--653},
publisher = {Springer Verlag},
title = {{Differential Weight Based Hybrid Approach to Detect Software Plagiarism}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84960415716{\&}partnerID=40{\&}md5=db3dfbd47b1bf3a4a30bd364964c2b17 http://link.springer.com/10.1007/978-981-10-0135-2{\_}62},
volume = {409},
year = {2016}
}
@inproceedings{sheahen2016,
abstract = {Cheating in computer science classes can damage the reputation of institutions and their students. It is therefore essential to routinely authenticate student submissions with available software plagiarism detection algorithms such as Measure of Software Similarity (MOSS). Scaling this task for large classes where assignments are repeated each semester adds complexity and increases the instructor workload. The MOSS Tool for Addressing Plagiarism at Scale (MOSS-TAPS), organizes the MOSS submission task in courses that repeat coding assignments. In a recent use-case in the Online Master of Science in Computer Science (OMSCS) program at the Georgia Institute of Technology, the instructor time spent was reduced from 50 hours to only 10 minutes using the managed submission tool design presented here. MOSS-TAPS provides persistent configuration, supports a mixture of software languages and file organizations, and is implemented in pure Java for cross-platform compatibility.},
address = {New York, USA},
author = {Sheahen, Dana and Joyner, David},
booktitle = {Proceedings of the Third ACM Conference on Learning @ Scale},
doi = {10.1145/2876034.2893435},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2016 - Sheahen, Joyner - TAPS A MOSS Extension for Detecting Software Plagiarsim at Scale.pdf:pdf},
isbn = {978-1-4503-3726-7},
keywords = {academic integrity,cheating,moss,software plagiarism},
pages = {285--288},
publisher = {ACM Press},
series = {L@S '16},
title = {{TAPS: A MOSS Extension for Detecting Software Plagiarsim at Scale}},
url = {http://doi.acm.org/10.1145/2876034.2893435 http://dl.acm.org/citation.cfm?doid=2876034.2893435},
year = {2016}
}
